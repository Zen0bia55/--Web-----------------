可用性与性能
性能提升策略
我们的网站为基于web高校社团信息发布网站，信息发布网站的吞吐量非常大，在当遇到高峰期的时候，网站性能低可能会导致网站反应速度非常慢，给使用者带来非常差的用户体验。因此我们应该通过一些策略来提升网站的性能。
1、 网站服务器应增加带宽，保障数据的传输速度，以便应对更大量的信息交换。
2、 网站应采用缓存技术，把信息缓存在用户本地，以减少用户每次登录时加载的信息量。
3、 应减少web页面的HTTP请求，因为每次http链接的开销非常大，每当用户发出申请，大部分时间都会浪费在等待链接。因此，志愿者相关信息尽可能一次性全面的展现在用户面前，不用用户去进一步点击请求。
4、 在网站流量高峰期，应减少动态图片、动画，换为静态，并优化页面信息容量，尽可能把最全面的信息一次性展现给用户。
5、 提升网站服务器的性能。
6、 优化数据库：针对每个大型志愿者招聘活动期间产生大量的数据，可以考虑采用一定的策略将数据存到多个数据表中。例如，网站按照一个月内的志愿者招募信息保存到一个表中；而信息的字段太多，我将其内容 content 字段 保存到另外一个表中，避免一个表过大的问题； 就是将系统按照模块相关的特征分布到不同的数据中，以提高系统整体负载能力。
7、 使页面与组件分离，将一个web站点中不同的资源类型保存在与网页不同的服务器中，网页通过调用URL来使用组建，这样可以分担负载，将服务器资源最大化利用。
一、避免出现脚本失控
不论什么脚本，在任何时间、任何浏览器上执行，都不应该超过100毫秒。如果实际执行的时间长于这个底限，一定要将进程分解成若干更小的代码段。脚本失控基本上有以下四个方面的原因：
1. 在循环中执行了太多的操作解决这个问题的诀窍就是用下面这两个问题来评估每个循环：
◆这个循环必须要同步执行么？
◆循环里面的数据，必须要按顺序执行么？
如果1和2都可以否定，那么就需使用setTimeout方式将循环体切分成小块进行异步处理，将循环中的定义变量及初始化操作放到循环外。
2. 臃肿的函数体
在JavaScript中，我们应该尽可能的用局部变量来代替全局变量!
3. 过多的递归
使用迭代方式替代递归，采用memoization技术优化递归，斐波那契数列的递归算法优化。
4. 过多的DOM调用
在Web开发中，JavaScript的一个很重要的作用就是对DOM进行操作。可你知道么？对DOM的操作是非常昂贵的，因为这会导致浏览器执行回流（reflow）操作。而执行了过多的回流操作，你就会发现自己的网站变得越来越慢了。我们应该尽可能的减少DOM操作。回流操作主要会发生在几种情况下：
◆改变窗体大小。
◆更改字体。
◆添加移除stylesheet块。
◆内容改变哪怕是输入框输入文字。
◆CSS虚类被触发如 :hover。
◆更改元素的className。
◆当对DOM节点执行新增或者删除操作或内容更改时。
◆动态设置一个style样式时。
◆当获取一个必须经过计算的尺寸值时，比如访问offsetWidth、clientHeight或者其他需要经过计算的CSS值（在兼容DOM的浏览器中，可以通过getComputedStyle函数获取；在IE中，可以通过currentStyle属性获取）解决问题的关键，就是限制通过DOM操作所引发回流的次数:
1.在对当前DOM进行操作之前，尽可能多的做一些准备工作，保证N次创建，1次写入。
2.在对DOM操作之前，把要操作的元素，先从当前DOM结构中删除：
（1）通过removeChild()或者replaceChild()实现真正意义上的删除。
（2）设置该元素的display样式为“none”。修改操作完成后，将上面这个过程反转过来，建议使用第2种方式。
3.CSS部分
另外一个经常引起回流操作的情况是通过style属性对元素的外观进行修改，如element.style.backgroundColor = "blue"；每次修改元素的style属性，都肯定会触发回流操作，要解决这个问题可以：
（1）使用更改className的方式替换style.xxx=xxx的方式。
（2）使用style.cssText = '';一次写入样式。
（3）避免设置过多的行内样式
（4）添加的结构外元素尽量设置它们的位置为fixed或absolute
（5）避免使用表格来布局
（6）避免在CSS中使用JavaScript expressions(IE only)
4.将获取的DOM数据缓存起来。这种方法，对获取那些会触发回流操作的属性（比如offsetWidth等）尤为重要。
5.当对HTMLCollection对象进行操作时，应该将访问的次数尽可能的降至最低，最简单的，你可以将length属性缓存在一个本地变量中，这样就能大幅度的提高循环的效率。
二、避免大字符串字面量对象操作，如 字符串.lenth，尽量转换为new String(字符串)后再进行操作
三、在做字符查找替换等操作时善用正则表达式快速掌握ECMAScript正则表达式。
四、减少语句，利用运算符优先级实现if else表达式，使用三元表达式，使用连续表达式（看情况，将损失程序可读性）利用运算符优先级实现if else表达式。
五、将CSS，JS文件合并到一个文件
六、避免Javascript事件绑定出现内存泄漏这些内存泄漏的出现，往往是由于Javascript对象与对象之间的循环应用。
七、使用WEB Workers技术（支持html5的浏览器）
Web Workers为JavaScript提供了一种能在后台进程中运行的方法，Web Workers进程能够在不影响用户界面的情况下处理任务此外还有其他一些提升web应用性能的策略
1.采用缓存技术
web缓存技术被认为是减轻服务器负载、降低网络拥塞、增强万维网可扩展性的有效途径，其基本思想是利用客户访问的时间局部性(Temporal Locality)原理，将客户访问过的内容在Cache中存放一个副本，当该内容下次被访问时，不必连接到驻留网站或重新计算生成，而是由Cache中保留的副本提供。Web缓存可以带来如下的好处：
(1) 减少网络流量，从而减轻网络拥塞;这是因为缓存避免了一部分HTTP请求。
(2) 降低客户访问延迟，其主要原因有：①已缓存的内容，客户可以缓存获取而不是从服务器获取或重新计算生成，从而减小了传输延迟缩短了响应时间;②没有被缓存的内容由于网络拥塞及服务器负载的减轻而可以较快地被客户获取;
(3) 由于客户的部分或者全部请求内容可以从通过缓存获取，从而减轻了远程服务器负载。
(4) 如果由于服务器故障或网络故障造成服务器无法响应客户请求，客户可以从缓存中获取缓存的内容副本，使得web站点服务的鲁棒性(Robustness)得到了加强。
可以看出web缓存能给web站点带可观的性能提升。其实在用户发出请求到一幅完整的网页呈现在用户面前这一过程中缓存无处不在，下面是web性能优化时常用的缓存技术，你会发现缓存被广泛应用在各个环节。浏览器缓存：浏览器一般会在用户文件系统中创建一个目录，用于存放缓存文件，并给每个缓存文件打上必要的标记，比如过期时间等。这些标记主要用于浏览器和服务器之间的缓存协商。Web服务器缓存：一个URL在一段较长时间内对应一个唯一的响应内容，比如静态内容或者更新不太频繁的动态内容，web服务器可将响应内容缓存起来，下次web服务器便可以在收到请求后立即拿出事先缓存好的响应内容并返回给浏览器。代理服务器缓存：暴露在互联网中与后端的web服务器通过内部网络相连的前端服务器称为反向代理服务器，建立在反向代理服务器上的缓存称为反向代理缓存。暴露在互联网中与后端的web客户端通过内部网络相连的前端服务器称为正向代理服务器，建立在正向代理服务器上的缓存称为正向代理缓存。代理服务器缓存位于客户端和web服务器之间，可以将它看做二者之间的一个中继站。它的存在可以改善客户端的访问速度、提升web server的服务能力、安全性等等。
2.Web组件分离
这里所说的web组件是指web服务器提供的所有基于URL访问的资源，包括动态内容，静态网页，图片，样式表，脚本，视频等等。这些资源在文件大小，文件数量，内容更新频率，预计并发用户数，是否需要脚本解释器等方面有着很大的差异，对不同特性资源采用能充分发挥其潜力的优化策略，能极大的提高web站点的性能。例如：将图片部署在独立的服务器上并为其分配独立的新域名，对静态网页使用epoll模型可以在大并发数情况下吞吐率保持稳定。
3.使用Web负载平衡技术
负载均衡是web站点规模水平扩展的一种手段，实现负载均衡的方法有好几种包括基于HTTP重定向的负载均衡，DNS负载均衡，反向代理负载均衡，四层负载均衡等等。对这些负载均衡方法做简单的介绍：基于HTTP重定向的负载均衡利用了HTTP重定向的请求转移和自动跳转功能来实现负载均衡，我们熟悉的镜像下载就使用这种负载均衡。DNS负载均衡是指在一个DNS服务器中为同一个主机名配置多个IP地址，在应答DNS查询时返回不同的解析结果将客户端的访问引到不同的机器上，使得不同的客户端访问不同的服务器，从而达到负载均衡的目的。反向代理负载均衡也叫七层负载均衡，这是因为反向代理服务器工作在TCP七层结构的第七层(应用层)，它通过检查流经的HTTP报头，根据报头内的信息来执行负载均衡任务。四层负载均衡是基于NAT技术的负载均衡，它将一个Internet上合法注册的IP地址映射为多个内部服务器的IP地址，对每次TCP连接请求动态使用其中一个内部IP地址，达到负载均衡的目的。此外，还有工作在数据链路层(第二层)的直接路由方式下的负载均衡，它通过修改数据包目标MAC地址来实现。以及，基于IP隧道的负载均衡，在这种方式下可以将实际服务器根据需要部署在不同的地域，并据就近访问的原则来转移请求，CDN服务便是基于IP隧道技术来实现的。Web负载均衡在扩展web服务器规模的同时也给web站点性能优化提供了一个更大更复杂也更灵活自由的平台，基于该平台性能优化的策略包括共享文件系统，内容分发与同步，分布式文件系统，分布式计算，分布式缓存等。
4.优化数据库
Web服务器软件在数据库方面做的优化主要是减少访问数据库的次数，具体做法就是使用各种缓存方法。也可以从数据库本身入手提高其查询性能，这涉及到数据库性能优化方面的知识本文不作讨论。另外也可以通过主从复制，读写分离，使用反向代理，写操作分离等方式来扩展数据库规模，提升数据库服务能力。


可用性提升策略                                                  
1.尽量避免大量使用Flash
2.网站设计要美观.大方网站的设计都有一个共同点，它们都有一个象征信誉的LOGO和易用的布局。它们的配色方案令人感到舒服，广告词注重收益，精确无误而又与目标受众密切相关;能够吸引用户的相关图片;易于更新的特别标记;所有这些内容，又全都包含在一个直观，友好的导航结构中。
3.重点突出网站应该让用户在短时间内了解其大致内容。网站设计者可以在首页上给出最相关的资料，通过合理的安排做到这点;也可以利用一些具有代表意义的链接如“关于我们”，“关于该网站”等对网站内容进一步分类。
4.明确，清晰的导航访问用户可以根据每个页面上的导航链接轻松地进入其它页面，从而节省了用户的查询时间。此外，它还有助于搜索引擎的快速抓取并缓存网页。这些链接可放置在网页的底部。
5.确保网站的下载速度良好保证站内所有链接可以在段时间内下载完毕。网站用户一般在几秒钟内就会做出决定，他不会花费更多的时间单击“后退”按钮或出入其它网址进入其它相关网页。所以，一定要确保网站下载速度。
6.在最好的位置放最好的内容网页的布局对可用性有显著的影响。用户首先看的是网页的左上角，接着向右浏览，然后是左边最后会停在网页的中间，是一个"F"模式。因此，中部应该放最重要的内容。
7.加强网站内容的可读性可读性差的网站很容易使访问用户失去兴趣，就会大大减少用户在网站上的浏览时间。可读性差是由于字体较小、颜色搭配单一、句子冗长、背景图片重复及不恰当的标题所致。
8.正式发布之前对网站进行全面测试上传网站内容之前先对网站做一个全面测试非常重要。测试过程中有必要认真收集诸如网站下载时间、导航、网页可用性、网页内容、浏览器兼容性等数据。
9.定期检测网站服务器日志数据服务器日志数据应该是改善网站可用性的最佳信息源。网络日志可提供访问用户进入网站所用的关键词、网站无法访问时间、访问量最大的网页、退出页面等数据信息，通过分析网络日志的数据可找出特定访问用户浏览的页面，以及退出网页的准确时间等。这些分析结果可有助于网站优化。因此，保证每天检测一遍服务器日志非常重要。
10.便于快速浏览的文本网络用户一般不会在线精读文本内容，他们通常是快速浏览。因此.应该尽量使用简短、醒目的文本。举个例子来说，可以通过超链接的形式将重要的信息从页面中分离出来，这样会使这段重要信息显得非常醒目。将一个段落以重点列表的形式表示也是一种非常可行的方法。看看下面的文章。你将学会如何建站，如何设计网页以加快它的下载速度，如何选取恰当的颜色，如何改进网站的导航系统从而方便用户访问。
从心理学角度上的策略
1．软件的设计能够使用户把知觉和思维集中在自己的任务上，可以按照自己的行动过程进行操作，不必分心在寻找人机界面的菜单或理解软件结构、人机界面的结构与图标含义，不必分心考虑如何把自己的任务转换成计算机的输入方式和输入过程。
2．用户不必记忆面向计算机硬件软件的知识。
3．用户不必为手的操作分心，操作动作简单重复。
4．在非正常环境和情景时，用户仍然能够正常进行操作。
5．用户理解和操作出错较少。
6．用户学习操作的时间较短，减少识别成本。
7首页可用性设计
首页元素要清晰的关注用户的关键任务（避免“增加功能倾向（featuritis）”）
如果网站比较大，那么首页应包含搜索输入框
首页要十分清楚的提供产品（内容）分类
在首页或首页内一次点击展示有用的内容
信息展示时应当是简单的、自然的、符合逻辑顺序的
在首页展示真实网站内容的优秀示例
首页上的链接以最重要的关键词作为起始（例如：“Sun holidays”而不是“Holidays in the sun”）
在首页提供一个最近的特色项列表，并提供存档内容的链接
首页导航不要过度格式化（修饰），确保用户不会把它误认为广告
在首页清晰的声明价值取向（例如一个标志性的口号或欢迎语）
在首页包含有意义的图案设计，而非无关的剪贴画或绘画作品
导航选项按逻辑性或用户导向方式排序（把次要的公司信息放在底部）
首页标题（title）可以为诸如google等搜索引擎提供良好可见度
所有公司相关信息安排在一个显著区域（例如：“关于我们（About Us）”）
用户可以了解到价值取向
一看到首页，第一次访问的人就知道从何处开始
在首页展示出所有主要的操作选项
首页拥有一个易记的URL
首页需经过专业设计，以给用户良好的第一印象
首页的设计要能激发用户探索站点的兴趣
首页就要像一个首页，不能让用户把它与二级页面混淆
8任务导向
网站应避免出现不相干的、多余的或让用户分心的信息
避免过多的使用脚本、小应用程序（applets）、视频音频文件、图案和图片
网站应避免不必要的登记
关键人物路径必须是清晰的，无干扰的（例如：购买、捐献）
信息以简单的、自然的（natural）、符合逻辑顺序的方式展示
应尽量缩减每个任务需要的屏幕数量
应减量减少页面滚动（scrolling）和点击
网站应正确的预期和提示用户下一步可能的动作
展示图表时，确保用户可以看到真实数据（例如在柱状图上标明数字注解）
当分配给用户任务时，应充分利用计算机的优势（例如搜索输入的自动完成功能）
用户可以快速完成普通任务
当必要时，应为当前任务提供数据对比功能（例如：商品比较）
任务顺序应当与用户日常工作顺序一致
网站可以保证用户的工作比不使用它时更轻松快捷
最重要的或经常使用的主题、特征或功能应放在页面中央附近的位置，而不是特别靠左边或右边
确保用户不会重复输入相同的信息
重要的、频繁使用的主题或任务应接近网站的“表面”
保持最少的录入（例如购买过程中），并为用户提供加速器
任何给定任务路径应当有一个合理的步骤长度（2-5次点击）
当一个任务有多步时，网站要告诉用户完成任务需要的所有步骤，并为用户当前步骤所在的位置提供反馈
在每个产品后面紧跟它的价格
可以非常容易的找到网站的隐私策略，尤其是在那些要求填写个人信息的页面。隐私策略应当是简单的、清晰的
网站用户不需要记住从一个地方到另一个地方的信息
隐喻的使用可以被典型用户轻松理解
数据格式应当遵循文化常规
软件的内部工作细节不要暴露给用户
应当迎合用户那些之前已经养成的那些小的互联网习惯
网站应当易于用户浏览，在执行前可以自己尝试其它的功能操作
第一次到访的典型用户应当可以在不需帮助的情况下完成最常用的功能
当用户回到网站时，用户可以记得如何执行主要任务
那些新颖设备（novel device controls）的功能应当是显而易见的
在购物车页面，在页面的顶部或底部应当清晰的展示”处理结账”按钮
重要的操作入口（例如“添加到购物车”）应当非常清晰可见
操作按钮（例如“提交”）应当由用户触发，而非在完成所有选项时系统自动触发
命令或操作项英以按钮的形式的展示（而非例如链接）
如果用户在事务处理中中途退出，用户在稍后返回站点时可以继续他退出之前的工作
当页面展示大量信息时，用户可以排序和过滤信息
按钮或图标上的图像应当与内容相关
当用户被系统自动注销时应当提示用户，并且自动注销的时间间隔要恰当
不必要的功能（例如flash动画）可以被关闭或跳过(skip)
网站应当是健壮的，并且所有关键功能可正常工作（例如不应有javascript页面异常、CGI报错或死链接）
网站通过不同程度的说明来支持新手用户和专家用户（例如帮助信息、错误信息）
网站允许用户重新填写一些信息项（例如更改发货地址、更改账户信息）
网站允许用户自定义操作时间参数（例如自动退出的时间）
